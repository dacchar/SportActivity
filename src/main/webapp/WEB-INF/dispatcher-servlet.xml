<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation=
	    "http://www.springframework.org/schema/beans  
		http://www.springframework.org/schema/beans/spring-beans.xsd  
		http://www.springframework.org/schema/context  
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd  
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd  
		http://www.springframework.org/schema/tx  
		http://www.springframework.org/schema/tx/spring-tx.xsd"
>  

	<context:property-placeholder location="classpath:jdbc.properties" />
	<context:component-scan base-package="org.dac.stady" />
	<tx:annotation-driven transaction-manager="hibernateTransactionManager" />
	
	<bean id="viewResolver"
	    class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="viewClass">
	        <value>
	            org.springframework.web.servlet.view.tiles3.TilesView
	        </value>
	    </property>
	</bean>
	
	<bean id="tilesConfigurer"
	    class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <property name="definitions">
	        <list>
	            <value>/WEB-INF/tiles.xml</value>
	        </list>
	    </property>
	</bean>

    
    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="${database.driver}" />  
        <property name="url" value="${database.url}" />  
        <property name="username" value="${database.user}" />  
        <property name="password" value="${database.password}" />  
    </bean>  
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="annotatedClasses">  
            <list>
                <value>org.dac.stady.domain.Activity</value>
                <value>org.dac.stady.domain.ActivityType</value>
                <value>org.dac.stady.domain.User</value>
                <value>org.dac.stady.domain.Person</value>
                <value>org.dac.stady.domain.SportDevice</value>
            </list>  
        </property>  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
            </props>  
        </property>  
    </bean>
    
    <bean id="hibernateTransactionManager"  class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
            
    <!-- spring messages with i18n start: -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <property name="basename" value="classpath:messages" />
	    <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	 
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>
		
	<mvc:interceptors>
	    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	        <property name="paramName" value="lang" />
	    </bean>
	</mvc:interceptors>
	
	<!-- spring messages with i18n end: -->
	
	 
	 <!-- Themen, css begin: -->
	 <!-- 
	<bean id="themeSource"
	    class="org.springframework.ui.context.support.ResourceBundleThemeSource">
	        <property name="basenamePrefix" value="theme-" />
	</bean>
	 
	<bean id="themeChangeInterceptor"
	    class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
	    <property name="paramName" value="theme" />
	</bean>
	<bean id="themeResolver"
	    class="org.springframework.web.servlet.theme.CookieThemeResolver">
	    <property name="defaultThemeName" value="default" />
	</bean>
	  -->
	 <!-- Themen, css end: -->
	 
	 
	<!-- convert to show City list + one-to-many in combobox: -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	      <property name="formatters">
	           <set>
	                 <ref bean="activityTypeFormatter"/>
	                 <ref bean="personFormatter"/>
	                 <ref bean="userFormatter"/>
	                 <ref bean="sportDeviceFormatter"/>
	           </set>
	      </property>
	</bean>
	
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10000000" />
	</bean>
		
	<!-- it is neccessary for rest: -->
	<!-- content negotiation: -->
	 <bean id="cnManager"  class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
		 <property name="favorPathExtension" value="true"/>
		 <property name="favorParameter" value="true"/>  
		 <property name="ignoreAcceptHeader" value="true" />  
		 <property name="defaultContentType" value="application/json" />  
		 <property name="useJaf" value="false"/>  
		 
		 <property name="mediaTypes">  
		   <map>  
			   <entry key="json" value="application/json" />  
			   <entry key="xml" value="application/xml" />  
		   </map>  
		 </property>  
		</bean>
 	  	
	 
    <!-- an HTTP Session-scoped bean exposed as a proxy -->
    <bean id="activityFilter" class="org.dac.stady.domain.ActivityFilter" scope="session">
      <!-- this next element effects the proxying of the surrounding bean -->
      <aop:scoped-proxy/>
    </bean>
   
   	 
 	<mvc:resources mapping="/resources/**" location="/resources/mytheme/" />
 	
	<mvc:annotation-driven
		content-negotiation-manager="cnManager" 
		conversion-service="conversionService"
	/>
	
	<!-- it is neccessary for rest end. -->
	
</beans>